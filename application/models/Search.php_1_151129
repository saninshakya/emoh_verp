<?php
class Search extends CI_Model {
 
    function __construct()
     {
         // Call the Model constructor
         parent::__construct();
     }

	function getFirstPoint($namePoint,$TOAdvertising)
	{
		//$TOAdvertising => 1=>ขาย, 2=>ขายดาวน์, 3=>เช่า
		$query=$this->db->query('Select Type, Lat, Lng, KeyID from KeyMarker Where KeyName="'.$namePoint.'"');
		$row=$query->row();
		$Type=$row->Type;
		$KeyID=$row->KeyID;
		$Lat=$row->Lat;
		$Lng=$row->Lng;
		$centerMap=array(
			"CenterName" => $namePoint,
			"Lat" => $Lat,
			"Lng" => $Lng
		);
		$resultSearch=array();
		array_push($resultSearch, $centerMap);
		//Area Search
		if ($Type=="Area"){
			$queryArea=$this->db->query('Select PID, PName_th, Lat, Lng from Project Where Area="'.$namePoint.'"');
			foreach ($queryArea->result() as $rowArea){
				$PID=$rowArea->PID;
				$ProjectName=$rowArea->PName_th;
				$Lat=$rowArea->Lat;
				$Lng=$rowArea->Lng;
				if ($TOAdvertising=="1"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(TotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and  (TOAdvertising="1" or TOAdvertising="3")  group by PID');
				}
				if ($TOAdvertising=="1"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(DTotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and TOAdvertising="2" group by PID');
				}
				if ($TOAdvertising=="3"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(RRentPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and (TOAdvertising="3" or TOAdvertising="4") group by PID');
				}
				if ($queryPost->num_rows()>0){
					$rowPost=$queryPost->row();
					$NumUnit=$rowPost->NumUnit;
					$MinPrice=$rowPost->MinPrice;
					$MinPrice=number_format(($MinPrice/1000000), 1, '.', '')."M";
					$MinPricePerSq=$rowPost->MinPricePerSq;
					$MinPricePerSq=number_format(($MinPricePerSq/1000), 1, '.', '')."k";
					$Point=array(
						"PID" => $PID,
						"ProjectName" => $ProjectName,
						"Lat" => $Lat,
						"Lng" => $Lng,
						"NumUnit" => $NumUnit,
						"MinPrice" => $MinPrice,
						"MinPricePerSq" => $MinPricePerSq 
					);
					array_push($resultSearch,$Point);
				}
			}
		}
		//Province Search
		if ($Type=="Province"){
			$queryProvince=$this->db->query('Select PID, PName_th, Lat, Lng from Project Where Province="'.$namePoint.'"');
			foreach ($queryProvince->result() as $rowProvince){
				$PID=$rowProvince->PID;
				$ProjectName=$rowProvince->PName_th;
				$Lat=$rowProvince->Lat;
				$Lng=$rowProvince->Lng;
				if ($TOAdvertising=="1"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(TotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and  (TOAdvertising="1" or TOAdvertising="3")  group by PID');
				}
				if ($TOAdvertising=="2"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(DTotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and TOAdvertising="2" group by PID');
				}
				if ($TOAdvertising=="3"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(RRentPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and (TOAdvertising="3" or TOAdvertising="4") group by PID');
				}
				if ($queryPost->num_rows()>0){
					$rowPost=$queryPost->row();
					$NumUnit=$rowPost->NumUnit;
					$MinPrice=$rowPost->MinPrice;
					$MinPrice=number_format(($MinPrice/1000000), 1, '.', '')."M";
					$MinPricePerSq=$rowPost->MinPricePerSq;
					$MinPricePerSq=number_format(($MinPricePerSq/1000), 1, '.', '')."k";
					$Point=array(
						"PID" => $PID,
						"ProjectName" => $ProjectName,
						"Lat" => $Lat,
						"Lng" => $Lng,
						"NumUnit" => $NumUnit,
						"MinPrice" => $MinPrice,
						"MinPricePerSq" => $MinPricePerSq 
					);
					array_push($resultSearch,$Point);
				}
			}
		}
		//MRT or BTS
		if ($Type=="BTS" or $Type=="MRT"){
			//$queryBTSMRT=$this->db->query('Select PID from DistanceBTSMRT  Where '.$KeyID.'<1500');
			$queryBTSMRT=$this->db->query('Select  PID from DistMarker Where Station="'.$KeyID.'" and Distance<=1500');
			foreach($queryBTSMRT->result() as $rowBTSMRT)
				$PID=$rowBTSMRT->PID;
				$queryProject=$this->db->query('Select * from Project Where PID="'.$PID.'"');
				$rowProject=$queryProject->row();
				$ProjectName=$rowProject->PName_th;
				$Lat=$rowProject->Lat;
				$Lng=$rowProject->Lng;
				if ($TOAdvertising=="1"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(TotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and  (TOAdvertising="1" or TOAdvertising="3")  group by PID');
				}
				if ($TOAdvertising=="2"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(DTotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and TOAdvertising="2" group by PID');
				}
				if ($TOAdvertising=="3"){
					$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(RRentPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" and (TOAdvertising="3" or TOAdvertising="4") group by PID');
				}
				if ($queryPost->num_rows()>0){
					$rowPost=$queryPost->row();
					$NumUnit=$rowPost->NumUnit;
					$MinPrice=$rowPost->MinPrice;
					$MinPrice=number_format(($MinPrice/1000000), 1, '.', '')."M";
					$MinPricePerSq=$rowPost->MinPricePerSq;
					$MinPricePerSq=number_format(($MinPricePerSq/1000), 1, '.', '')."k";
					$Point=array(
						"PID" => $PID,
						"ProjectName" => $ProjectName,
						"Lat" => $Lat,
						"Lng" => $Lng,
						"NumUnit" => $NumUnit,
						"MinPrice" => $MinPrice,
						"MinPricePerSq" => $MinPricePerSq 
					);
					array_push($resultSearch,$Point);
			}
		}
		//Project Name Search
		if ($Type=="PID"){
			$queryProject=$this->db->query('Select PID, PName_th, Lat, Lng from Project Where PName_th="'.$namePoint.'"');
			foreach ($queryProject->result() as $rowArea){
				$PID=$rowArea->PID;
				$ProjectName=$rowArea->PName_th;
				$Lat=$rowArea->Lat;
				$Lng=$rowArea->Lng;
				$queryPost=$this->db->query('Select count(POID) as NumUnit, Min(TotalPrice) as MinPrice, Min(PricePerSq) as MinPricePerSq from Post Where Active=1 and PID="'.$PID.'" group by PID');
				if ($queryPost->num_rows()>0){
					$rowPost=$queryPost->row();
					$NumUnit=$rowPost->NumUnit;
					$MinPrice=$rowPost->MinPrice;
					$MinPrice=number_format(($MinPrice/1000000), 1, '.', '')."M";
					$MinPricePerSq=$rowPost->MinPricePerSq;
					$MinPricePerSq=number_format(($MinPricePerSq/1000), 1, '.', '')."k";
					$Point=array(
						"PID" => $PID,
						"ProjectName" => $ProjectName,
						"Lat" => $Lat,
						"Lng" => $Lng,
						"NumUnit" => $NumUnit,
						"MinPrice" => $MinPrice,
						"MinPricePerSq" => $MinPricePerSq 
					);
					array_push($resultSearch,$Point);
				}
			}			
		}
		echo json_encode($resultSearch);
	}

	function getPoint($distance,$namePoint,$TOProperty,$Bedroom,$Bathroom,$Year,$TOAdvertising,$minPrice,$maxPrice){
		//Log Test
//		$process_id=$this->testlog->genprocessid();
//		$this->testlog->savelogstart($process_id);

		//Year=>0 notCheck Year=>1<1 Year=>2<2 Year=3<3
		if ($Year!=0){
			$YC=$Year;
			$YN=date("Y")+543;
			$YD=$YN-abs($YC);
			$YD2=$YN+10;
			if($YC<0){
				$ChkYear=" and YearEnd<='".$YD."' and YearEnd<'".$YD2."' ";
			}else{
				$ChkYear=" and YearEnd>'".$YD."' and YearEnd<'".$YD2."' ";
			}
		} else {
			$ChkYear="";
		}
		$query=$this->db->query('Select Type, Lat, Lng, KeyID from KeyMarker Where KeyName="'.$namePoint.'"');
		if ($query->num_rows()!=0){
			$row=$query->row();
			$Type=$row->Type;
			$KeyID=$row->KeyID;
			$Lat=$row->Lat;
			$Lng=$row->Lng;
		} else {
			$Type="Project";
			$query=$this->db->query('Select * from Project Where PName_th="'.$namePoint.'"');
			$row=$query->row();
			$Lat=$row->Lat;
			$Lng=$row->Lng;
		}
		$centerMap=array(
			"CenterName" => $namePoint,
			"Lat" => $Lat,
			"Lng" => $Lng
		);
		$resultSearch=array();
		array_push($resultSearch, $centerMap);
		if($Type=="BTS" or $Type=="MRT"){
			if ($distance==0 || $distance==''){
				$distance="1500";
			}
//			$queryProject=$this->db->query('Select a.* from Project a left join DistMarker b on b.PID=a.PID Where b.Station="'.$KeyID.'" and b.Distance<="'.$distance.'" '.$ChkYear.' ');
			$queryProject=$this->db->query('Select * from Project Where PID IN (Select PID from DistMarker Where Station="'.$KeyID.'" and Distance<="'.$distance.'") '.$ChkYear);
//			$qPID='Select PID from DistMarker Where Station="'.$KeyID.'" and Distance<="'.$distance.'" '.$ChkYear;
		}else{
			if($Type=="Project"){
				$queryP='PName_th="'.$namePoint.'"';
			}
			if($Type=="Area"){
				$queryP='Area="'.$namePoint.'"';
			}
			if($Type=="Province"){
				$queryP='Province="'.$namePoint.'"';
			}
			if($Type=="PID"){
				$queryP='PName_th="'.$namePoint.'"';
			}
			$queryProject=$this->db->query('Select * from Project Where '.$queryP.$ChkYear);
//			$qPID='Select * from Project Where '.$queryP.$ChkYear;
		}

		foreach ($queryProject->result() as $rowProject){
			$PID=$rowProject->PID;
/*
			$ProjectName=$rowProject->PName_th;
			$Lat=$rowProject->Lat;
			$Lng=$rowProject->Lng;
			$YearEnd=$rowProject->YearEnd;
			$CondoUnit=$rowProject->CondoUnit;
			$CarParkUnit=$rowProject->CarParkUnit;
			$CamFee=$rowProject->CamFee;
			$queryDist=$this->db->query('Select a.Type,a.Distance,b.KeyName,b.Lat,b.Lng from DistMarker a left join KeyMarker b on b.KeyID=a.Station Where a.PID="'.$PID.'" and a.Type in("BTS","MRT","BRT","SRT") order by a.Distance ASC limit 1');
			$rowDist=$queryDist->row();
			$Station=$rowDist->KeyName;
			$StationType=$rowDist->Type;
			$StationDist=number_format($rowDist->Distance/1000,1);
			$queryPrice=$this->db->query('Select min(a.TotalPrice) as MinPriceS,max(a.TotalPrice) as MaxPriceS,avg(a.TotalPrice) as AvgPriceS, min(a.DTotalPrice) as MinPriceD,max(a.DTotalPrice) as MaxPriceD,avg(a.DTotalPrice) as AvgPriceD, min(a.PRentPrice) as MinPriceR,max(a.PRentPrice) as MaxPriceR,avg(a.PRentPrice) as AvgPriceR from Post a where a.PID="'.$PID.'" ');
			$rowPrice=$queryPrice->row();
*/ 
			$queryPost=$this->queryPost($Bedroom,$Bathroom,$TOAdvertising,$PID,$minPrice,$maxPrice,$TOProperty);
			if($queryPost->num_rows()>0){
//Move for reduce loop
			$ProjectName=$rowProject->PName_th;
			$Lat=$rowProject->Lat;
			$Lng=$rowProject->Lng;
			$YearEnd=$rowProject->YearEnd;
			$CondoUnit=$rowProject->CondoUnit;
			$CarParkUnit=$rowProject->CarParkUnit;
			$CamFee=$rowProject->CamFee;
//			$queryDist=$this->db->query('Select a.Type,a.Distance,b.KeyName,b.Lat,b.Lng from DistMarker a left join KeyMarker b on b.KeyID=a.Station Where a.PID="'.$PID.'" and a.Type in("BTS","MRT","BRT","SRT") order by a.Distance ASC limit 1');
			$queryDist=$this->db->query('Select Type, Distance, (select KeyName from KeyMarker where KeyID=DistMarker.Station and Type=DistMarker.Type) as KeyName, (select Lat from KeyMarker Where KeyID=DistMarker.Station and Type=DistMarker.Type) as Lat, (select Lng from KeyMarker Where KeyID=DistMarker.Station and Type=DistMarker.Type) as Lng from DistMarker Where PID="'.$PID.'" and Type in("BTS","MRT","BRT","SRT") order by Distance ASC limit 1');
			$rowDist=$queryDist->row();
			$Station=$rowDist->KeyName;
			$StationType=$rowDist->Type;
			$StationDist=number_format($rowDist->Distance/1000,1);
			$queryPrice=$this->db->query('Select min(a.TotalPrice) as MinPriceS,max(a.TotalPrice) as MaxPriceS,avg(a.TotalPrice) as AvgPriceS, min(a.DTotalPrice) as MinPriceD,max(a.DTotalPrice) as MaxPriceD,avg(a.DTotalPrice) as AvgPriceD, min(a.PRentPrice) as MinPriceR,max(a.PRentPrice) as MaxPriceR,avg(a.PRentPrice) as AvgPriceR from Post a where a.PID="'.$PID.'" ');
			$rowPrice=$queryPrice->row();
//End Move
				$rowPost=$queryPost->row();
				$Advertising=$rowPost->TOAdvertising;
				$NumUnit=$rowPost->NumUnit;
				if($Advertising==1){//ขาย
					$Price=$rowPost->MinPriceS;
					$MinPrice=$rowPrice->MinPriceS;
					$MaxPrice=$rowPrice->MaxPriceS;
					$AvgPrice=$rowPrice->AvgPriceS;
				}else if($Advertising==2){//ขายดาวน์
					$Price=$rowPost->MinPriceD;
					$MinPrice=$rowPrice->MinPriceD;
					$MaxPrice=$rowPrice->MaxPriceD;
					$AvgPrice=$rowPrice->AvgPriceD;
				}else if($Advertising==5){//เช่า
					$Price=$rowPost->MinPriceR;
					$MinPrice=$rowPrice->MinPriceR;
					$MaxPrice=$rowPrice->MaxPriceR;
					$AvgPrice=$rowPrice->AvgPriceR;
				}
				$MinPricePerSq=$rowPost->MinPricePerSq;
				if(!$MinPricePerSq || $MinPricePerSq==NULL || $MinPricePerSq==0){
					$MinPricePerSq=$Price/$rowPost->useArea;
				}
				if($Advertising==5){
					$Price=number_format(($Price/1000), 0, '.', '')."k";
					$MinPrice=number_format(($MinPrice/1000), 0, '.', '')."k";
					$MaxPrice=number_format(($MaxPrice/1000), 0, '.', '')."k";
					$AvgPrice=number_format(($AvgPrice/1000), 0, '.', '')."k";
					$MinPricePerSq="฿".number_format(($MinPricePerSq), 0, '.', '');
				}else{
					$Price=number_format(($Price/1000000), 1, '.', '')."M";
					$MinPrice=number_format(($MinPrice/1000000), 1, '.', '')."M";
					$MaxPrice=number_format(($MaxPrice/1000000), 1, '.', '')."M";
					$AvgPrice=number_format(($AvgPrice/1000000), 1, '.', '')."M";
					$MinPricePerSq=number_format(($MinPricePerSq/1000), 0, '.', '')."k";
				}
				$Point=array(
					"PID" => $PID,
					"ProjectName" => $ProjectName,
					"Lat" => $Lat,
					"Lng" => $Lng,
					"NumUnit" => $NumUnit,
					"Price" => $Price,
					"MinPrice" => $MinPrice,
					"MaxPrice" => $MaxPrice,
					"AvgPrice" => $AvgPrice,
					"MinPricePerSq" => $MinPricePerSq,
					"YearEnd"=>$YearEnd,
					"CondoUnit"=>$CondoUnit,
					"CarParkUnit"=>$CarParkUnit,
					"CamFee"=>$CamFee,
					"Advertising"=>$Advertising,
					"Station"=>$Station,
					"StationType"=>$StationType,
					"StationDist"=>$StationDist
				);
				array_push($resultSearch,$Point);
			}
		}
		
//		$this->testlog->savelogend($process_id);
		echo json_encode($resultSearch);
	}

	function queryPost($Bedroom,$Bathroom,$TOAdvertising,$PID,$minPrice,$maxPrice,$TOProperty){
		if ($TOProperty!=''){
			$TOProperty=substr($TOProperty,0,-1);
			$TOProperty=str_replace(",","','",$TOProperty);
			$pProperty=" and TOProperty in('".$TOProperty."')";
		} else {
			$pProperty="";
		}
		if ($Bedroom!=''){
			$Bedroom=substr($Bedroom,0,-1);
			$Bedroom=str_replace(",","','",$Bedroom);
			$pBedroom=" and Bedroom in('".$Bedroom."')";
		} else {
			$pBedroom="";
		}
		if ($Bathroom!=''){
			$Bathroom=substr($Bathroom,0,-1);
			$Bathroom=str_replace(",","','",$Bathroom);
			$pBathroom=" and Bathroom in('".$Bathroom."')";
		} else {
			$pBathroom="";
		}
		if($TOAdvertising!=''){
			$TOAdvertising=substr($TOAdvertising,0,-1);
			$TOAdvertising_array=explode(",",$TOAdvertising);
			$TOAdvertising_in="";
			$pminPrice="";
			$pmaxPrice="";
			for($i=0;$i<count($TOAdvertising_array);$i++){
				if($TOAdvertising_array[$i]==1){//ขาย
					$TOAdvertising_in.='1,';
				}
				if($TOAdvertising_array[$i]==2){//ขายดาวน์
					$TOAdvertising_in.='2,';
				}
				if($TOAdvertising_array[$i]==5){//เช่า
					$TOAdvertising_in.='5,';
				}
				if($TOAdvertising_array[$i]==4){//ขาย+ขายดาวน์
					$TOAdvertising_in.='1,2,';
				}
				if($minPrice!=""){
					$pminPrice=' and (case when TOAdvertising=1 then TotalPrice>="'.$minPrice.'"';
					$pminPrice.=' when TOAdvertising=2 then DTotalPrice>="'.$minPrice.'"';
					$pminPrice.=' when TOAdvertising=5 then PRentPrice>="'.$minPrice.'"';
					$pminPrice.=' else true end)';
				}
				if ($maxPrice!=""){
					$pmaxPrice=' and (case when TOAdvertising=1 then TotalPrice<="'.$maxPrice.'" ';
					$pmaxPrice.=' when TOAdvertising=2 then DTotalPrice<="'.$maxPrice.'"';
					$pmaxPrice.=' when TOAdvertising=5 then PRentPrice<="'.$maxPrice.'"';
					$pmaxPrice.=' else true end)';
				}
			}
			$TOAdvertising_in=substr($TOAdvertising_in,0,-1);
			$TOAdvertising_in=str_replace(",","','",$TOAdvertising_in);
			$pAdvertising=" and TOAdvertising in('".$TOAdvertising_in."')";
		}else{
			$pAdvertising="";
		}
		$queryPost=$this->db->query('Select TOAdvertising,count(POID) as NumUnit, min(TotalPrice) as MinPriceS, min(DTotalPrice) as MinPriceD, min(PRentPrice) as MinPriceR, min(PricePerSq) as MinPricePerSq,useArea from Post Where Active=1 and DateExpire>=curdate() and PID="'.$PID.'" '.$pAdvertising.' '.$pProperty.' '.$pBedroom.$pBathroom.$pminPrice.$pmaxPrice.' group by PID,TOAdvertising');
		
		return $queryPost;
	}
	
	function queryPost2($Bedroom,$Bathroom,$TOAdvertising,$PID,$minPrice,$maxPrice,$TOProperty){
		if ($TOProperty!=''){
			$TOProperty=substr($TOProperty,0,-1);
			$TOProperty=str_replace(",","','",$TOProperty);
			$pProperty=" and TOProperty in('".$TOProperty."')";
		} else {
			$pProperty="";
		}
		if ($Bedroom!=''){
			$Bedroom=substr($Bedroom,0,-1);
			$Bedroom=str_replace(",","','",$Bedroom);
			$pBedroom=" and Bedroom in('".$Bedroom."')";
		} else {
			$pBedroom="";
		}
		if ($Bathroom!=''){
			$Bathroom=substr($Bathroom,0,-1);
			$Bathroom=str_replace(",","','",$Bathroom);
			$pBathroom=" and Bathroom in('".$Bathroom."')";
		} else {
			$pBathroom="";
		}
		if($TOAdvertising!=''){
			$TOAdvertising=substr($TOAdvertising,0,-1);
			$TOAdvertising_array=explode(",",$TOAdvertising);
			$TOAdvertising_in="";
			$pminPrice="";
			$pmaxPrice="";
			for($i=0;$i<count($TOAdvertising_array);$i++){
				if($TOAdvertising_array[$i]==1){//ขาย
					$TOAdvertising_in.='1,';
				}
				if($TOAdvertising_array[$i]==2){//ขายดาวน์
					$TOAdvertising_in.='2,';
				}
				if($TOAdvertising_array[$i]==5){//เช่า
					$TOAdvertising_in.='5,';
				}
				if($TOAdvertising_array[$i]==4){//ขาย+ขายดาวน์
					$TOAdvertising_in.='1,2,';
				}
				if($minPrice!=""){
					$pminPrice=' and (case when TOAdvertising=1 then TotalPrice>="'.$minPrice.'"';
					$pminPrice.=' when TOAdvertising=2 then DTotalPrice>="'.$minPrice.'"';
					$pminPrice.=' when TOAdvertising=5 then PRentPrice>="'.$minPrice.'"';
					$pminPrice.=' else true end)';
				}
				if ($maxPrice!=""){
					$pmaxPrice=' and (case when TOAdvertising=1 then TotalPrice<="'.$maxPrice.'" ';
					$pmaxPrice.=' when TOAdvertising=2 then DTotalPrice<="'.$maxPrice.'"';
					$pmaxPrice.=' when TOAdvertising=5 then PRentPrice<="'.$maxPrice.'"';
					$pmaxPrice.=' else true end)';
				}
			}
			$TOAdvertising_in=substr($TOAdvertising_in,0,-1);
			$TOAdvertising_in=str_replace(",","','",$TOAdvertising_in);
			$pAdvertising=" and TOAdvertising in('".$TOAdvertising_in."')";
		}else{
			$pAdvertising="";
		}
		$queryPost=$this->db->query('Select *,TotalPrice as Price,PRentPrice as RPrice, DATEDIFF(CURDATE(), DateCreate) as DateShow from Post Where Active=1 and DateExpire>=curdate() and PID="'.$PID.'" '.$pAdvertising.' '.$pProperty.' '.$pBedroom.$pBathroom.$pminPrice.$pmaxPrice.' group by PID,TOAdvertising,TOProperty,RoomNumber,Address');
		
		return $queryPost;
	}

	function getPostFromPoint($PID,$TOProperty,$Bedroom,$Bathroom,$Year,$TOAdvertising,$minPrice,$maxPrice){
//		$process_id=$this->testlog->genprocessid();
//		$this->testlog->savelogstart($process_id);		
		$queryPID=$this->queryPost2($Bedroom,$Bathroom,$TOAdvertising,$PID,$minPrice,$maxPrice,$TOProperty);
		$arrayPID=array();
		foreach ($queryPID->result() as $rowPOID){
			$POID=$rowPOID->POID;
			$ProjectName=$rowPOID->ProjectName;
			$Advertising=$rowPOID->TOAdvertising;
			$useArea=$rowPOID->useArea;
			$useArea=$useArea+($rowPOID->terraceArea);
			if($Advertising==1){//ขาย
				$Price=$rowPOID->Price;
			}else if($Advertising==2){//ขายดาวน์
				$Price=$rowPOID->Price;
			}else if($Advertising==5){//เช่า
				$Price=$rowPOID->RPrice;
			}
			$PricePerSq=$Price/$useArea;
			if ($Advertising==5){
				$Price=number_format(($Price), 0, '', ',');
			} else {
				$Price=number_format(($Price/1000000), 2, '.', '')."M";
			}
			$PricePerSq=number_format($PricePerSq, 0,'',',');
			$Bedroom=$rowPOID->Bedroom;
			if ($Bedroom=="99")
			{
				$Bedroom="สตูดิโอ";
			}
			$Floor=$rowPOID->Floor;
			$DateShow=$rowPOID->DateShow;
			if ($rowPOID->RedPost==1){
				$Tel=$rowPOID->Telephone1;
			} else {
				//$Tel="โทรหาทันที";
				$Tel=substr($rowPOID->Telephone1,0,3)."-XXX-XXXX";
			}
			$queryLog=$this->db->query('Select Count(ViewTelByUserID) as ViewTel from LogViewPost Where POID="'.$POID.'"');
			if ($queryLog->num_rows()>0){
				$rowLog=$queryLog->row();
				$ViewTel=$rowLog->ViewTel;
			} else {
				$ViewTel=0;
			}
			$queryPic=$this->db->query('Select * from ImagePost Where POID="'.$POID.'"');
			$arrayPIC=array();
			if ($queryPic->num_rows()>0){
				foreach ($queryPic->result() as $rowPic){
					$file=$rowPic->file;
					if ($rowPic->Thumb==1){
							$checkJPG=strpos($file,'.jpg');
							if ($checkJPG!==false){
								$file=str_replace(".jpg","t.jpg",$file);
							}
							$checkPNG=strpos($file,'.png');
							if ($checkPNG!==false){
								$file=str_replace(".png","t.png",$file);
							}
							$checkJPG=strpos($file,'.JPG');
							if ($checkJPG!==false){
								$file=str_replace(".JPG","t.JPG",$file);
							}
							$checkPNG=strpos($file,'.PNG');
							if ($checkPNG!==false){
								$file=str_replace(".PNG","t.PNG",$file);
							}
					}
					array_push($arrayPIC,$file);
				}
			}
			$queryDistMarker=$this->db->query('Select a.Distance,a.Station,a.Type,b.KeyName from DistMarker a left join KeyMarker b on a.Station=b.KeyID Where a.PID="'.$PID.'" and (a.Type="BTS" or a.Type="MRT" or a.Type="BRT" or a.Type="ARL") order by a.Distance limit 1');
			$arrayDist=array();
			if($queryDistMarker->num_rows()>0){
				$rowDistMarker=$queryDistMarker->row();
				$Distance=$rowDistMarker->Distance;
				$Distance=$Distance/1000;
				$Distance=number_format($Distance,1,'.',',');
				$KeyName=$rowDistMarker->KeyName;
				$DistName=$KeyName." ".$Distance." กม.";
				//array_push($arrayDist,$DistName);
			}
			$arrayPOID=array(
				"POID"=>$POID,
				"ProjectName"=>$ProjectName,
				"Price"=>$Price,
				"PricePerSq"=>$PricePerSq,
				"Bedroom"=>$Bedroom,
				"useArea"=>$useArea,
				"Floor"=>$Floor,
				"DateShow"=>$DateShow,
				"ViewTel"=>$ViewTel,
				"Tel"=>$Tel,
				"Picture"=>$arrayPIC,
				"DistName"=>$DistName
			);
			array_push($arrayPID,$arrayPOID);
		}
//		$this->testlog->savelogend($process_id);
		echo  json_encode($arrayPID);
	}

	function getUnitFromPOID($POID){
		$queryUnit=$this->db->query('Select *, DATEDIFF(CURDATE(), DateCreate) as DateShow from Post Where POID="'.$POID.'"');
		return $queryUnit;
	}

	function selectCountingList($POID,$PID){
		$queryPost=$this->db->query('Select Count(POID) as AllList from Post Where Active=1 and PID="'.$PID.'"');
		$rowPost=$queryPost->row();
		$AllList=$rowPost->AllList;
		$queryPost=$this->db->query('Select count(POID) ListNumber from Post Where Active=1 and PID="'.$PID.'" and POID<="'.$POID.'"');
		$rowPost=$queryPost->row();	
		$ListNumber=$rowPost->ListNumber;
		$result=array($ListNumber,$AllList);
		return $result;
	}

	function ContViewList($POID){
		$queryLog=$this->db->query('Select Count(ID) as NumberView from LogViewPost Where POID="'.$POID.'" and ViewTelByUserID is not null');
		if ($queryLog->num_rows() > 0){
			$rowLog=$queryLog->row();
			$result=$rowLog->NumberView;
		} else {
			$result=0;
		}
		return $result;
	}

	function CountSoldPerMonth($PID){
		$queryPost=$this->db->query('Select Count(POID) as NumberSell from Post Where Active=0 and Status=3 and PID="'.$PID.'"');
		if ($queryPost->num_rows() > 0){
			$rowPost=$queryPost->row();
			$NumberSell=$rowPost->NumberSell;
		} else {
			$NumberSell=0;
		}
		$queryPost=$this->db->query('Select DATEDIFF(Min(DateCreate), Max(DateCreate)) as DaySell from Post Where Active=0 and Status=3 and PID="'.$PID.'"');
		if ($queryPost->num_rows() > 0){
			$rowPost=$queryPost->row();
			$DaySell=$rowPost->DaySell;
			echo $DaySell;
			$DaySell=$DaySell/30;
		} else {
			$result=0;
		}
		if ($DaySell!=0){
			$resultNumber=$NumberSell/$DaySell;
			$result=number_format($resultNumber, 0,'',',');
		} else {
			$result=0;
		}
		return $result;
	}

	function SelectImgFromPOID($POID){
		$queryImg=$this->db->query('Select file from ImagePost Where POID="'.$POID.'"');
		$result=array();
		foreach ($queryImg->result() as $rowImg){
			$file=$rowImg->file;
					if ($rowImg->Thumb==1){
							$checkJPG=strpos($file,'.jpg');
							if ($checkJPG!==false){
								$file=str_replace(".jpg","t.jpg",$file);
							}
							$checkPNG=strpos($file,'.png');
							if ($checkPNG!==false){
								$file=str_replace(".png","t.png",$file);
							}
							$checkJPG=strpos($file,'.JPG');
							if ($checkJPG!==false){
								$file=str_replace(".JPG","t.JPG",$file);
							}
							$checkPNG=strpos($file,'.PNG');
							if ($checkPNG!==false){
								$file=str_replace(".PNG","t.PNG",$file);
							}
					}
			array_push($result,$file);
		}
		return $result;
	}
	
	function CountImg($POID){
		$queryImg=$this->db->query('Select count(ImgID) as number from ImagePost Where POID="'.$POID.'"');
		if ($queryImg->num_rows() > 0){
			$rowImg=$queryImg->row();
			$NumberImg=$rowImg->number;
		} else {
			$NumberImg=0;
		}
		return $NumberImg;
	}

	function DistMRTBTS($PID){
		$queryDistMarker=$this->db->query('Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and (Type="BTS" or Type="MRT" or Type="BRT" or Type="ARL") and Distance<1500 order by Distance limit 3');
		//echo 'Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and (Type="BTS" or Type="MRT" or Type="BRT" or Type="ARL") order by Distance limit 3';
		//echo 'Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and (Type="BTS" or Type="MRT" or Type="BRT" or Type="ARL") order by Distance limit 3';
		//$rowDistMarker=$queryDistMarker->row();
		$result=array();
		foreach ($queryDistMarker->result() as $rowDistMarker){ 
			$Distance=$rowDistMarker->Distance;
			$Distance=$Distance/1000;
			$Distance=number_format($Distance, 2,'.',',');
			$KeyID=$rowDistMarker->Station;
			$Type=$rowDistMarker->Type;
			$queryKeyMarker=$this->db->query('Select a.KeyName,a.Lat,a.Lng,b.Pic_path from KeyMarker a left join KeyMarkerType b on a.Type=b.Type Where a.KeyID="'.$KeyID.'"');
			$rowKeyMarker=$queryKeyMarker->row();
			array_push($result, $Distance,$Type,$rowKeyMarker->KeyName);
			//array_push($result, $Distance,$Type,$rowKeyMarker->KeyName,$rowKeyMarker->Lat,$rowKeyMarker->Lng,$rowKeyMarker->Pic_path);
		}
		return $result;
	}

	function DistFromType($PID,$Type){
		if ($Type=="Minimart"){
			$DistLimit=500;
		} else {
			$DistLimit=3000;
		};
		$queryDistMarker=$this->db->query('Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and Type="'.$Type.'" and Distance<"'.$DistLimit.'"  order by Distance limit 3');
		//echo 'Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and Type="'.$Type.'" and Distance<"'.$DistLimit.'"  order by Distance limit 3';
		$result=array();
		foreach ($queryDistMarker->result() as $rowDistMarker){ 
			$Distance=$rowDistMarker->Distance;
			$Distance=$Distance/1000;
			$Distance=number_format($Distance, 2,'.',',');
			$KeyID=$rowDistMarker->Station;
			$Type=$rowDistMarker->Type;
			$queryKeyMarker=$this->db->query('Select a.KeyName,a.Lat,a.Lng,b.Pic_path from KeyMarker a left join KeyMarkerType b on a.Type=b.Type Where a.KeyID="'.$KeyID.'"');
			$rowKeyMarker=$queryKeyMarker->row();
			array_push($result, $Distance,$Type,$rowKeyMarker->KeyName);
			//array_push($result, $Distance,$Type,$rowKeyMarker->KeyName,$rowKeyMarker->Lat,$rowKeyMarker->Lng,$rowKeyMarker->Pic_path);
		}
		return $result;
	}
	
	function DistMRTBTS2($PID){
		$queryDistMarker=$this->db->query('Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and (Type="BTS" or Type="MRT" or Type="BRT" or Type="ARL") and Distance<1500 order by Distance limit 3');
		$i=0;
		foreach ($queryDistMarker->result() as $rowDistMarker){
			$i++;
			$result[$i]=array();
			$Distance=$rowDistMarker->Distance;
			$Distance=$Distance/1000;
			$Distance=number_format($Distance, 1,'.',',');
			$KeyID=$rowDistMarker->Station;
			$Type=$rowDistMarker->Type;
			$queryKeyMarker=$this->db->query('Select a.KeyName,a.Lat,a.Lng,b.Pic_path from KeyMarker a left join KeyMarkerType b on a.Type=b.Type Where a.KeyID="'.$KeyID.'"');
			$rowKeyMarker=$queryKeyMarker->row();
			array_push($result[$i], $Distance,$Type,$rowKeyMarker->KeyName,$rowKeyMarker->Lat,$rowKeyMarker->Lng,$rowKeyMarker->Pic_path,$i);
		}
		return $result;
	}
	
	function DistFromType2($PID,$Type){
		if ($Type=="Minimart"){
			$DistLimit=500;
		} else {
			$DistLimit=3000;
		};
		$queryDistMarker=$this->db->query('Select Distance, Station, Type from DistMarker Where PID="'.$PID.'" and Type="'.$Type.'" and Distance<"'.$DistLimit.'"  order by Distance limit 3');
		$i=0;
		foreach ($queryDistMarker->result() as $rowDistMarker){
			$i++;
			$result[$i]=array();
			$Distance=$rowDistMarker->Distance;
			$Distance=$Distance/1000;
			$Distance=number_format($Distance, 1,'.',',');
			$KeyID=$rowDistMarker->Station;
			$Type=$rowDistMarker->Type;
			$queryKeyMarker=$this->db->query('Select a.KeyName,a.Lat,a.Lng,b.Pic_path from KeyMarker a left join KeyMarkerType b on a.Type=b.Type Where a.KeyID="'.$KeyID.'"');
			$rowKeyMarker=$queryKeyMarker->row();
			array_push($result[$i], $Distance,$Type,$rowKeyMarker->KeyName,$rowKeyMarker->Lat,$rowKeyMarker->Lng,$rowKeyMarker->Pic_path,$i);
		}
		return $result;
	}

	function getCondoSpec($POID,$GCSID){
		$queryTOCondoSpec=$this->db->query('Select * from TOCondoSpec Where GCSID="'.$GCSID.'"');
		$result=array();
		foreach ($queryTOCondoSpec->result() as $rowCondoSpec){
			$TOCSID=$rowCondoSpec->TOCSID;
			$queryPostCondoSpec=$this->db->query('Select * from PostCondoSpec Where TOCSID="'.$TOCSID.'" and POID="'.$POID.'"');
			if ($queryPostCondoSpec->num_rows()==1){
				array_push($result,$rowCondoSpec->CSName_th);
			}
		}
		return $result;
	}

	function getPostDCondo($POID,$Type){
		$queryPostDCondo=$this->db->query('Select * from PostDCondo Where POID="'.$POID.'" and HistoryDPayment="'.$Type.'" Order By DPaymentTime');
		return $queryPostDCondo;
	}

	function KeyDirection($DID){
		if ($DID=="0"){
			$result="--";
		} else {
			$query=$this->db->query('Select DNameEn from Direction Where DID="'.$DID.'"');
			$row=$query->row();
			$result=$row->DNameEn;
		}
		return $result;
	}
	
	function KeyDirection_th($DID){
		if ($DID=="0"){
			$result="--";
		} else {
			$query=$this->db->query('Select DName from Direction Where DID="'.$DID.'"');
			$row=$query->row();
			$result=$row->DName;
		}
		return $result;
	}

	function updateViewPost($POID){
		$date=date("Y-m-d H:i:s");
		if ($this->tank_auth->is_logged_in()){
			$user_id=$this->session->userdata('user_id');
		} else {
			$user_id=$this->input->ip_address();
		};
		$query=$this->db->query('Select ID from LogViewPost Where ViewByUserID="'.$user_id.'" and POID="'.$POID.'"');
		if ($query->num_rows()==0){
			$this->db->query('Insert into LogViewPost set ViewByUserID="'.$user_id.'" , POID="'.$POID.'", LastUpdate="'.$date.'"');
		}
	}

	function checkTypeAdvertising($POID)
	{
		$query=$this->db->query('Select TOAdvertising from Post Where POID="'.$POID.'"');
		$row=$query->row();
		return $row->TOAdvertising;
	}

	function qMarker()
	{
        $this->db->query('SET NAMES utf8');
        $this->db->query('SET character_set_results=utf8');
        //$query=$this->db->query('select PName_th from Project Order By PName_th');
		$query=$this->db->query('Select ProjectName from Post Where Active="1" Group By ProjectName');
		$result=array();
		foreach ($query->result() as $row){
			//array_push($result,$row->PName_th);
			array_push($result,$row->ProjectName);
		}
        //$query=$this->db->query('select KeyName from KeyMarker Where Type!="Minimart"');
		$query=$this->db->query('select KeyName from KeyMarker Where Type="BTS" or Type="ARL" or Type="MRT"');
		foreach ($query->result() as $row){
			array_push($result,$row->KeyName);
		}
        return $result;
	}

	function qLabel($type,$lang=1){
		$this->db->select('label,description');
		if($type!=''){
			$type_in=array($type,'main');
			$this->db->where_in('type',$type_in);
		}
		if($lang!=''){
			$this->db->where('language',$lang);
		}
		$this->db->where('status=1');
		$this->db->order_by('type','asc');
		$query=$this->db->get('cfg_label');
		foreach ($query->result() as $row){
			$result[$row->label]=array();
			array_push($result[$row->label],$row->description);
		}
		return $result;
	}
	
	function getArea($name,$distance=10000,$advertising='',$proptype,$bedroom,$bathroom,$age=0){
		$this->db->select('a.Area,count(b.POID) as unit,d.KeyName as namepoint,avg(b.PricePerSq) as pricepersq');
		$this->db->join('Post b','b.PID=a.PID','LEFT');
		$this->db->join('DistMarker c','c.PID=a.PID','LEFT');
		$this->db->join('KeyMarker d','d.KeyID=c.Station','LEFT');
		if($proptype!=''){
			$proptype_in=substr($proptype,0,-1);
			$proptype_in=str_replace(",","','",$proptype_in);
			$this->db->where("b.TOProperty in('".$proptype_in."')");
		}
		if($advertising!=''){
			$advertising_in=substr($advertising,0,-1);
			$advertising_in=str_replace(",","','",$advertising_in);
			$this->db->where("b.TOAdvertising in('".$advertising_in."')");
		}
		if ($bedroom!=''){
			$bedroom_in=substr($bedroom,0,-1);
			$bedroom_in=str_replace(",","','",$bedroom_in);
			$this->db->where("b.Bedroom in('".$bedroom_in."')");
		}
		if ($bathroom!=''){
			$bathroom_in=substr($bathroom,0,-1);
			$bathroom_in=str_replace(",","','",$bathroom_in);
			$this->db->where("b.Bathroom in('".$bathroom_in."')");
		}
		$this->db->where('b.active',1);
		$this->db->where('b.DateExpire>=curdate()');
		$this->db->where('c.Distance<=',$distance);
		$this->db->where('d.KeyName',$name);
		if ($age!=0){
			$YN=date("Y")+543;
			$YD=$YN-abs($age);
			$YD2=$YN+10;
			//$ChkYear=" and (".$YN."-YearEnd)<=".$YC." and (".$YN."-YearEnd)>-1";
			if($age<0){
				$this->db->where('a.YearEnd<=',$YD);
			}else{
				$this->db->where('a.YearEnd>',$YD);
			}
			$this->db->where('a.YearEnd<',$YD2);
		}
		$this->db->group_by('d.KeyName');
		$this->db->order_by('c.Distance');
		$this->db->limit(1);
		$query=$this->db->get('Project a');
		$row=$query->row();
		return $row;
	}
	
	function getProjectUnit($name,$nowyear,$type,$distance=10000,$advertising,$status='',$select){
		if($select==1){
			$this->db->select('sum(a.CondoUnit) as unit');
			//$query='Select sum(CondoUnit) as unit';
		}else{
			$this->db->select('count(b.POID) as unit');
		}
		$this->db->join('Post b','a.PID=b.PID','LEFT');
		$this->db->join('DistMarker c','c.PID=a.PID','LEFT');
		$this->db->join('KeyMarker d','d.KeyID=c.Station','LEFT');
		if($type==0){
			$this->db->where('a.YearEnd>',$nowyear);
		}else if($type==1){
			$this->db->where('a.YearEnd',$nowyear);
		}else if($type==2){
			$this->db->where('a.YearEnd<=',$nowyear);
		}
		$this->db->where('b.POID is not null');
		$this->db->where('c.Distance<=',$distance);
		$this->db->where('d.KeyName',$name);
		if($advertising!=''){
			$this->db->where('b.TOAdvertising',$advertising);
		}
		if($status!=''){
			$this->db->where('b.Active',$status);
		}
		$this->db->group_by('d.KeyName');
		//$this->db->order_by('c.Distance');
		$query=$this->db->get('Project a');
		$row=$query->row();
		return $row->unit;
	}
		
	function getMarketCont($namepoint,$distance,$advertising,$nowyear,$proptype,$bedroom,$bathroom,$age){
//		$process_id=$this->testlog->genprocessid();
//		$this->testlog->savelogstart($process_id);
		
		$rowArea=$this->getArea($namepoint,$distance,$advertising,$proptype,$bedroom,$bathroom,$age);
		$areaname=$rowArea->Area;
		$areaunit=$rowArea->unit;
		$areasqprice=number_format($rowArea->pricepersq,0);
		
		$projectunit_total=$this->getProjectUnit($namepoint,$nowyear,-1,$distance,'','',1);
		$projectunit_now=$this->getProjectUnit($namepoint,$nowyear,1,$distance,'','',1);
		$projectunit_untilnow=$this->getProjectUnit($namepoint,$nowyear,2,$distance,'','',1);
		$projectunit_future=$this->getProjectUnit($namepoint,$nowyear,0,$distance,'','',1);
		
		//$projectunit_active=$this->getProjectUnit($namepoint,$nowyear,2,$distance,'',1,2);
		$projectunit_active_sale=$this->getProjectUnit($namepoint,$nowyear,2,$distance,1,1,2);//ขาย
		$projectunit_active_down=$this->getProjectUnit($namepoint,$nowyear,-1,$distance,2,1,2);//ขายดาวน์
		$projectunit_active_rent=$this->getProjectUnit($namepoint,$nowyear,2,$distance,5,1,2);//เช่า
		$projectunit_active=$projectunit_active_sale+$projectunit_active_down+$projectunit_active_rent;
				
		$arrayCont=array(
			"AreaName"=>$namepoint,
			"AreaUnit"=>$areaunit,
			"AreaSqPrice"=>$areasqprice,
			"NowYear"=>$nowyear,
			"ProjectUnit_total"=>$projectunit_total,
			"ProjectUnit_now"=>$projectunit_now,
			"ProjectUnit_untilnow"=>$projectunit_untilnow,
			"ProjectUnit_future"=>$projectunit_future,
			"ProjectUnit_active"=>$projectunit_active,
			"ProjectUnit_active_sale"=>$projectunit_active_sale,
			"ProjectUnit_active_down"=>$projectunit_active_down,
			"ProjectUnit_active_rent"=>$projectunit_active_rent
		);
//		$this->testlog->savelogend($process_id);

		echo json_encode($arrayCont);
	}
	
	function getFacebookID(){
		$query=$this->db->query('select name_th,name_en from cfg_master where type="facebook_id" and status=1 ');
		$row=$query->row();
		return $row->name_th;
	}
	
	function getMaxYearProject(){
		$query=$this->db->query('select max(YearEnd) as year from Project ');
		$row=$query->row();
		return $row->year;
	}
}